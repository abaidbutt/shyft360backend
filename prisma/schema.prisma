// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Shyft {
    id        Int     @id @default(autoincrement())
    type      String?
    status    String
    createdAt String
}

model Account {
    id            Int            @id @default(autoincrement())
    firstName     String?
    lastName      String?
    email         String?        @unique
    password      String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    RefreshTokens RefreshToken[] @relation(name: "AccountToRefreshToken")
    Business      Business[]
    Role          Role[]

    @@map("accounts")
}

model Role {
    id           Int            @id @default(autoincrement())
    email        String         @unique
    firstName    String?
    lastName     String?
    password     String?
    permissions  Json?
    type         String?
    accounts     Account?       @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: Cascade)
    accountId    Int?
    Contacts     Contacts[]
    Organization Organization[]
    History      History[]
    Deals        Deals[]
    Projects     Projects[]
    Tasks        Tasks[]
    Lists        Lists[]

    @@map("roles")
}

model RefreshToken {
    id          String   @id @unique @default(uuid())
    hashedToken String
    revoked     Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    accounts    Account? @relation(name: "AccountToRefreshToken", fields: [accountId], references: [id])
    accountId   Int?
}

model Business {
    id        Int            @id @default(autoincrement())
    type      String
    name      String
    country   String //location
    employees String
    time      String
    sales     String
    status    String         @default("Paid")
    emailSend Boolean        @default(false)
    account   Account?       @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: Cascade)
    accountId Int?
    legalInfo LegalBusiness?

    @@map("business")
}

model LegalBusiness {
    id           Int     @id @default(autoincrement())
    legalname    Json
    address      Json?
    homeAddress  Json?
    firstName    String?
    lastName     String?
    birthdate    String?
    type         String?
    picture      String?
    identityType String? @default("Passport")

    website        String?
    supportwebsite String?
    supportemail   String?
    supportphone   String?
    business       Business? @relation(fields: [businessId], references: [id])
    businessId     Int?      @unique
}

model Status {
    id           Int            @id @default(autoincrement())
    name         String
    position     Int?
    Contacts     Contacts[]
    TaskTemplate TaskTemplate[]
    Lists        Lists[]
}

model Types {
    id           Int            @id @default(autoincrement())
    name         String
    position     Int?
    Contacts     Contacts[]
    TaskTemplate TaskTemplate[]
    Lists        Lists[]
}

model Contacts {
    id              Int           @id @default(autoincrement())
    name            String
    color           String?
    bestway         String?
    phone           String?
    email           String
    source          Source?       @relation(fields: [sourceId], references: [id])
    sourceId        Int?
    organizations   Organization? @relation(fields: [organizationsId], references: [id])
    organizationsId Int?
    types           Types[]
    status          Status[]
    assignTo        Role[]
    History         History[]
    Deals           Deals[]
    Tasks           Tasks[]
}

model Source {
    id       Int        @id @default(autoincrement())
    name     String?
    Contacts Contacts[]
}

model Organization {
    id       Int        @id @default(autoincrement())
    name     String
    address  Json?
    website  String?
    image    String?
    phone    String?
    email    String?
    tags     Json?
    created  DateTime   @default(now())
    contacts Contacts[]
    assignTo Role[]
}

model History {
    id             Int            @id @default(autoincrement())
    contacts       Contacts[]
    details        String?
    type           HistoryTypes?  @relation(fields: [historyTypesId], references: [id])
    historyTypesId Int?
    notify         Role[]
    flags          HistoryFlags[]
}

model HistoryTypes {
    id   Int     @id @default(autoincrement())
    name String?

    History History[]
}

model HistoryFlags {
    id      Int       @id @default(autoincrement())
    name    String?
    History History[]
}

model Deals {
    id          Int          @id @default(autoincrement())
    contacts    Contacts[]
    title       String?
    details     String?
    link        String?
    value       String?
    schedule    String?
    assignTo    Role[]
    closingDate String?
    status      DealStatus[]
    Tasks       Tasks[]
}

model DealStatus {
    id      Int      @id @default(autoincrement())
    status  String?
    deals   Int?     @default(0)
    default Boolean? @default(false)
    Deals   Deals[]
    actions String?
}

model ProjectStatus {
    id       Int        @id @default(autoincrement())
    name     String?
    Projects Projects[]
}

model Projects {
    id             Int             @id @default(autoincrement())
    title          String?
    details        String?
    link           String?
    value          String?
    frequency      String?
    assignTo       Role[]
    completionDate String?
    addcalender    Boolean?        @default(false)
    status         ProjectStatus[]
    commission     String?
    Tasks          Tasks[]
}

model Tasks {
    id         Int        @id @default(autoincrement())
    urgent     Boolean    @default(false)
    contacts   Contacts[]
    title      String?
    details    String?
    link       String?
    projects   Projects[]
    deals      Deals[]
    color      String?
    attachment Json?
    assignTo   Role[]
    startDate  String?
    endDate    String?
    allday     Boolean?   @default(true)
    repeat     Json?
    private    Boolean?   @default(false)
    remind     String?
}

model TaskTemplate {
    id         Int       @id @default(autoincrement())
    urgent     Boolean?  @default(false)
    title      String?
    details    String?
    link       String?
    color      String?
    attachment Json?
    startDate  DateTime?
    endDate    DateTime?
    allday     Boolean?  @default(true)
    private    Boolean?  @default(false)

    status Status[]
    types  Types[]
}

model Lists {
    id           Int        @id @default(autoincrement())
    name         String?
    description  String?
    types        Types[]
    status       Status[]
    assignType   Json?
    assignStatus Json?
    assignTo     Role[]
    tags         ListsTags? @relation(fields: [listsTagsId], references: [id])
    listsTagsId  Int?
    filters      Json?
}

model ListsTags {
    id    Int     @id @default(autoincrement())
    name  String?
    Lists Lists[]
}

model ContactField {
    id         Int     @id @default(autoincrement())
    name       String?
    type       String?
    addContact Boolean @default(false)
    required   Boolean @default(false)
    keydata    Json?
}

model Calender {
    id Int @id @default(autoincrement())
}

model ContactsNote {
    id      Int     @id @default(autoincrement())
    details String?
}

model Plan {
    id           Int            @id @default(autoincrement())
    name         String
    description  String?
    pricing      Json?
    status       Boolean?       @default(true)
    Subscription Subscription[]
}

model Subscription {
    id Int @id @default(autoincrement())

    schedule Json?
    billing  Json?

    plans      Plan[]
    customer   Customer? @relation(fields: [customerId], references: [id])
    customerId Int?
}

model Invoice {
    id         Int       @id @default(autoincrement())
    status     Boolean?  @default(true)
    items      Json?
    customer   Customer? @relation(fields: [customerId], references: [id])
    customerId Int?
    text       String
    billing    Json?
}

model Otp {
    id          Int     @id @default(autoincrement())
    amount      String?
    cardDetails Json?
    cardName    String?
    email       String?
    description String?
}

model Customer {
    id            Int            @id @default(autoincrement())
    name          String?
    email         String
    description   String
    country       String?
    address       Json?
    phone         String?
    shipasBill    Boolean?       @default(true)
    invoicePrefix String?
    taxIds        Json?
    Subscription  Subscription[]
    Invoice       Invoice[]
}

model Location {
    id      Int     @id @default(autoincrement())
    name    String?
    country String?
    address Json?
}

model TaxRate {
    id          Int      @id @default(autoincrement())
    type        String?
    region      String?
    rate        String?
    rateType    String?
    description String?
    status      Boolean? @default(true)
}

model Forms {
    id   Int    @id @default(autoincrement())
    name String
}
