generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("followings")
  followings    Follow[]  @relation("followers")

  @@fulltext([name, email])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main models
model Video {
  id          String    @id @default(cuid())
  caption     String    @db.Text
  videoURL    String    @db.Text
  coverURL    String    @db.Text
  videoWidth  Int
  videoHeight Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]

  @@fulltext([caption])
}

model Like {
  videoId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([videoId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  videoId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followingId, followerId])
}

model Region {
  id      Int     @id @default(autoincrement())
  name    String
  initial String
  status  Boolean
}

model Industry {
  id            Int           @id @default(autoincrement())
  name          String
  status        Boolean
  subindustries SubIndustry[]

  Business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?
}

model SubIndustry {
  id         Int       @id @default(autoincrement())
  name       String
  status     Boolean
  Industry   Industry? @relation(fields: [industryId], references: [id])
  industryId Int?
}

model Objective {
  id     Int     @id @default(autoincrement())
  name   String
  status Boolean
}

model Business {
  id       Int        @id @default(autoincrement())
  name     String
  email    String?
  phone    String?
  country  String?
  timeZone DateTime   @default(now())
  currency String?
  agency   Boolean    @default(false)
  created  DateTime   @default(now())
  industry Industry[]
}

model Collection {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
}
